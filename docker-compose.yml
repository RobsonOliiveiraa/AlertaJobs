# Stack: AlertaJobs
name: "AlertaJobs"

services:
  redis:
    image: redis:7-alpine
    # container_name: alerta-redis   # (opcional) descomente se quiser nome fixo
    command: ["redis-server","--save","60","1000","--loglevel","warning"]
    volumes:
      - redis_data:/data
    networks: [app_net]
    restart: unless-stopped
    healthcheck:
      test: ["CMD","redis-cli","ping"]
      interval: 10s
      timeout: 3s
      retries: 10
    mem_limit: 256m
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }

  postgres:
    image: postgres:15-alpine
    # container_name: alerta-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-n8n}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ChangeThis!123}
      POSTGRES_DB: ${POSTGRES_DB:-n8n}
      TZ: America/Sao_Paulo
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks: [app_net]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${POSTGRES_USER:-n8n} -d ${POSTGRES_DB:-n8n}"]
      interval: 10s
      timeout: 5s
      retries: 10
    mem_limit: 512m
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }

  n8n:
    image: n8nio/n8n:latest
    # container_name: alerta-n8n
    ports:
      - "5678:5678"    # depois coloque proxy + HTTPS e feche esta porta
    environment:
      # Banco (Postgres)
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB:-n8n}
      DB_POSTGRESDB_USER: ${POSTGRES_USER:-n8n}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD:-ChangeThis!123}

      # Fila (Redis/Bull)
      QUEUE_BULL_REDIS_HOST: redis
      QUEUE_BULL_REDIS_PORT: 6379

      # Segurança/URLs
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY:-please-change-this-key}
      N8N_HOST: ${N8N_HOST:-localhost}
      N8N_PORT: 5678
      N8N_PROTOCOL: ${N8N_PROTOCOL:-http}
      WEBHOOK_URL: ${WEBHOOK_URL:-http://localhost/}

      # Locale
      GENERIC_TIMEZONE: America/Sao_Paulo
      TZ: America/Sao_Paulo
      NODE_ENV: production
    volumes:
      - n8n_data:/home/node/.n8n
      - n8n_files:/files
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks: [app_net]
    restart: unless-stopped
    mem_limit: 1536m
    healthcheck:
      # página HTML raiz é suficiente para checar se o servidor respondeu
      test: ["CMD-SHELL","wget -qO- http://localhost:5678/ | head -n1 >/dev/null 2>&1 || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 15
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }

  waha:
    image: devlikeapro/whatsapp-http-api:latest
    # container_name: alerta-waha
    ports:
      - "3000:3000"   # proteja com API key ou proxy quando for público
    environment:
      TZ: America/Sao_Paulo
      # API_KEY: ${WAHA_API_KEY:-changeThisApiKey}   # opcional
    volumes:
      - waha_sessions:/sessions
    networks: [app_net]
    restart: unless-stopped
    mem_limit: 2048m
    healthcheck:
      # usa a raiz (200 OK) para não depender de endpoints exclusivos da versão Plus
      test: ["CMD-SHELL","wget -qO- http://localhost:3000/ >/dev/null 2>&1 || exit 1"]
      interval: 15s
      timeout: 5s
      retries: 20
    logging:
      driver: json-file
      options: { max-size: "10m", max-file: "3" }

networks:
  app_net: {}

volumes:
  postgres_data:
  redis_data:
  n8n_data:
  n8n_files:
  waha_sessions:
